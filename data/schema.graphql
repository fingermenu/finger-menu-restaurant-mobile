input AddChoiceItemInput {
  name: [LanguageStringTuple]!
  description: [LanguageStringTuple]
  choiceItemPageUrl: String
  imageUrl: String
  clientMutationId: String
}

type AddChoiceItemPayload {
  errorMessage: String
  choiceItem: ChoiceItemTypeEdge
  clientMutationId: String
}

input AddMenuItemInput {
  name: [LanguageStringTuple]!
  description: [LanguageStringTuple]
  menuItemPageUrl: String
  imageUrl: String
  clientMutationId: String
}

type AddMenuItemPayload {
  errorMessage: String
  menuItem: MenuItemTypeEdge
  clientMutationId: String
}

input AddRestaurantInput {
  name: [LanguageStringTuple]!
  websiteUrl: String
  imageUrl: String
  address: String
  googleMapUrl: String
  status: String
  inheritParentRestaurantMenus: Boolean
  pin: String
  clientMutationId: String
}

type AddRestaurantPayload {
  errorMessage: String
  restaurant: RestaurantTypeEdge
  clientMutationId: String
}

type BeServedWithMenuItemPrice implements Node {
  id: ID!
  currentPrice: Float
  wasPrice: Float
  validFrom: String
  validUntil: String
  menuItem: MenuItem
  size: Size
  choiceItemPrices: [ChoiceItemPrice!]
}

input CancelOrderInput {
  id: ID!
  clientMutationId: String
}

type CancelOrderPayload {
  errorMessage: String
  order: OrderTypeEdge
  clientMutationId: String
}

type ChoiceItem implements Node {
  id: ID!
  name: String
  description: String
  menuItemPageUrl: String
  imageUrl: String
  tags: [Tag!]
}

type ChoiceItemPrice implements Node {
  id: ID!
  currentPrice: Float
  wasPrice: Float
  validFrom: String
  validUntil: String
  choiceItem: ChoiceItem
  size: Size
}

# A connection to a list of items.
type ChoiceItemPriceTypeConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [ChoiceItemPriceTypeEdge]
}

# An edge in a connection.
type ChoiceItemPriceTypeEdge {
  # The item at the end of the edge
  node: ChoiceItemPrice

  # A cursor for use in pagination
  cursor: String!
}

# A connection to a list of items.
type ChoiceItemTypeConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [ChoiceItemTypeEdge]
}

# An edge in a connection.
type ChoiceItemTypeEdge {
  # The item at the end of the edge
  node: ChoiceItem

  # A cursor for use in pagination
  cursor: String!
}

input DateRange {
  from: String!
  to: String!
}

type GeoLocation {
  latitude: Float
  longitude: Float
}

type Language implements Node {
  id: ID!
  key: String
  name: String
  imageUrl: String
}

input LanguageStringTuple {
  language: String!
  value: String!
}

# A connection to a list of items.
type LanguageTypeConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [LanguageTypeEdge]
}

# An edge in a connection.
type LanguageTypeEdge {
  # The item at the end of the edge
  node: Language

  # A cursor for use in pagination
  cursor: String!
}

type Menu implements Node {
  id: ID!
  name: String
  description: String
  menuPageUrl: String
  imageUrl: String
  menuItemPrices: [MenuItemPrice!]
  tags: [Tag!]
}

type MenuItem implements Node {
  id: ID!
  name: String
  description: String
  menuItemPageUrl: String
  imageUrl: String
  tags: [Tag!]
}

type MenuItemPrice implements Node {
  id: ID!
  currentPrice: Float
  wasPrice: Float
  validFrom: String
  validUntil: String
  menuItem: MenuItem
  size: Size
  toBeServedWithMenuItemPrices: [BeServedWithMenuItemPrice!]
  choiceItemPrices: [ChoiceItemPrice!]
}

# A connection to a list of items.
type MenuItemPriceTypeConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [MenuItemPriceTypeEdge]
}

# An edge in a connection.
type MenuItemPriceTypeEdge {
  # The item at the end of the edge
  node: MenuItemPrice

  # A cursor for use in pagination
  cursor: String!
}

# A connection to a list of items.
type MenuItemTypeConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [MenuItemTypeEdge]
}

# An edge in a connection.
type MenuItemTypeEdge {
  # The item at the end of the edge
  node: MenuItem

  # A cursor for use in pagination
  cursor: String!
}

# A connection to a list of items.
type MenuTypeConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [MenuTypeEdge]
}

# An edge in a connection.
type MenuTypeEdge {
  # The item at the end of the edge
  node: Menu

  # A cursor for use in pagination
  cursor: String!
}

type Mutation {
  addChoiceItem(input: AddChoiceItemInput!): AddChoiceItemPayload
  addMenuItem(input: AddMenuItemInput!): AddMenuItemPayload
  addRestaurant(input: AddRestaurantInput!): AddRestaurantPayload
  updateTable(input: UpdateTableInput!): UpdateTablePayload
  placeOrder(input: PlaceOrderInput!): PlaceOrderPayload
  updateOrder(input: UpdateOrderInput!): UpdateOrderPayload
  cancelOrder(input: CancelOrderInput!): CancelOrderPayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

type Order implements Node {
  id: ID!
  numberOfAdults: Int
  numberOfChildren: Int
  customerName: String
  notes: String
  totalPrice: Float
  placedAt: String!
  cancelledAt: String
  restaurant: Restaurant!
  table: Table
  details: [OrderMenuItemPrice!]
}

type OrderChoiceItemPrice {
  choiceItemPrice: ChoiceItemPrice!
  quantity: Int!
}

input OrderChoiceItemPriceInput {
  choiceItemPriceId: ID!
  quantity: Int!
}

type OrderMenuItemPrice {
  menuItemPrice: MenuItemPrice!
  quantity: Int!
  orderChoiceItemPrices: [OrderChoiceItemPrice!]
}

input OrderMenuItemPriceInput {
  menuItemPriceId: ID!
  quantity: Int!
  orderChoiceItemPrices: [OrderChoiceItemPriceInput!]
}

# A connection to a list of items.
type OrderTypeConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [OrderTypeEdge]
}

# An edge in a connection.
type OrderTypeEdge {
  # The item at the end of the edge
  node: Order

  # A cursor for use in pagination
  cursor: String!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type ParentRestaurant implements Node {
  id: ID!
  name: String
  websiteUrl: String
  address: String
  geoLocation: GeoLocation
  phones: [Phone!]
  status: String
  googleMapUrl: String
  inheritParentRestaurantMenus: Boolean
  pin: String
  menus: [Menu!]
  tables: [Table!]
  configurations: RestaurantConfigurations!
}

type ParentTag implements Node {
  id: ID!
  name: String
  description: String
  imageUrl: String
  level: Int
  forDisplay: Boolean
}

type Phone {
  label: String
  number: String
}

input PlaceOrderInput {
  restaurantId: ID!
  numberOfAdults: Int
  numberOfChildren: Int
  customerName: String
  notes: String
  totalPrice: Float
  tableId: ID
  details: [OrderMenuItemPriceInput!]
  clientMutationId: String
}

type PlaceOrderPayload {
  errorMessage: String
  order: OrderTypeEdge
  clientMutationId: String
}

type Printer {
  name: String
  type: String
  hostname: String
  port: Int
}

type Query {
  user: User
  viewer: Viewer

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

type Restaurant implements Node {
  id: ID!
  name: String
  websiteUrl: String
  address: String
  geoLocation: GeoLocation
  phones: [Phone!]
  status: String
  googleMapUrl: String
  inheritParentRestaurantMenus: Boolean
  pin: String
  menus: [Menu!]
  tables: [Table!]
  configurations: RestaurantConfigurations!
  parentRestaurant: ParentRestaurant
}

type RestaurantConfigurations {
  images: RestaurantImages
  printers: [Printer!]
}

type RestaurantImages {
  primaryLandingPageBackgroundImageUrl: String
  secondaryLandingPageBackgroundImageUrl: String
  primaryTopBannerImageUrl: String
  secondaryTopBannerImageUrl: String
}

# A connection to a list of items.
type RestaurantTypeConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [RestaurantTypeEdge]
}

# An edge in a connection.
type RestaurantTypeEdge {
  # The item at the end of the edge
  node: Restaurant

  # A cursor for use in pagination
  cursor: String!
}

type Size implements Node {
  id: ID!
  name: String
  description: String
  imageUrl: String
  level: Int
  forDisplay: Boolean
}

# A connection to a list of items.
type SizeTypeConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [SizeTypeEdge]
}

# An edge in a connection.
type SizeTypeEdge {
  # The item at the end of the edge
  node: Size

  # A cursor for use in pagination
  cursor: String!
}

type Table implements Node {
  id: ID!
  name: String
  status: String
  numberOfAdults: Int
  numberOfChildren: Int
  customerName: String
  notes: String
  tableState: TableState
}

type TableState implements Node {
  id: ID!
  key: String
  name: String
  imageUrl: String
}

# A connection to a list of items.
type TableStateTypeConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [TableStateTypeEdge]
}

# An edge in a connection.
type TableStateTypeEdge {
  # The item at the end of the edge
  node: TableState

  # A cursor for use in pagination
  cursor: String!
}

# A connection to a list of items.
type TableTypeConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [TableTypeEdge]
}

# An edge in a connection.
type TableTypeEdge {
  # The item at the end of the edge
  node: Table

  # A cursor for use in pagination
  cursor: String!
}

type Tag implements Node {
  id: ID!
  name: String
  description: String
  imageUrl: String
  level: Int
  forDisplay: Boolean
  parentTag: ParentTag
}

# A connection to a list of items.
type TagTypeConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [TagTypeEdge]
}

# An edge in a connection.
type TagTypeEdge {
  # The item at the end of the edge
  node: Tag

  # A cursor for use in pagination
  cursor: String!
}

input UpdateOrderInput {
  id: ID!
  restaurantId: ID!
  numberOfAdults: Int
  numberOfChildren: Int
  customerName: String
  notes: String
  totalPrice: Float
  tableId: ID
  details: [OrderMenuItemPriceInput!]
  clientMutationId: String
}

type UpdateOrderPayload {
  errorMessage: String
  order: OrderTypeEdge
  clientMutationId: String
}

input UpdateTableInput {
  id: ID!
  name: [LanguageStringTuple]
  status: String
  tableState: String
  numberOfAdults: Int
  numberOfChildren: Int
  customerName: String
  notes: String
  clientMutationId: String
}

type UpdateTablePayload {
  errorMessage: String
  table: TableTypeEdge
  clientMutationId: String
}

type User implements Node {
  id: ID!
  tag(tagId: ID!): Tag
  tags(after: String, first: Int, before: String, last: Int, tagIds: [ID!], name: String, description: String, level: Int, forDisplay: Boolean, sortOption: String): TagTypeConnection
  size(sizeId: ID!): Size
  sizes(after: String, first: Int, before: String, last: Int, sizeIds: [ID!], name: String, sortOption: String): SizeTypeConnection
  menu(menuId: ID!): Menu
  menus(after: String, first: Int, before: String, last: Int, menuIds: [ID!], restaurantId: ID, name: String, description: String, sortOption: String): MenuTypeConnection
  choiceItem(choiceItemId: ID!): ChoiceItem
  choiceItems(after: String, first: Int, before: String, last: Int, choiceItemIds: [ID!], name: String, description: String, sortOption: String): ChoiceItemTypeConnection
  choiceItemPrice(choiceItemPriceId: ID!): ChoiceItemPrice
  choiceItemPrices(after: String, first: Int, before: String, last: Int, choiceItemPriceIds: [ID!], menuItemPriceId: ID, sortOption: String): ChoiceItemPriceTypeConnection
  menuItem(menuItemId: ID!): MenuItem
  menuItems(after: String, first: Int, before: String, last: Int, menuItemIds: [ID!], name: String, description: String, sortOption: String): MenuItemTypeConnection
  menuItemPrice(menuItemPriceId: ID!): MenuItemPrice
  menuItemPrices(after: String, first: Int, before: String, last: Int, menuItemPriceIds: [ID!], menuId: ID, sortOption: String): MenuItemPriceTypeConnection
  restaurant(restaurantId: ID!): Restaurant
  restaurants(after: String, first: Int, before: String, last: Int, restaurantIds: [ID!], name: String, status: Boolean, inheritParentRestaurantMenus: Boolean, sortOption: String): RestaurantTypeConnection
  table(tableId: ID!): Table
  tables(after: String, first: Int, before: String, last: Int, tableIds: [ID!], restaurantId: ID!, name: String, customerName: String, notes: String, tableState: String, sortOption: String): TableTypeConnection
  order(orderId: ID!): Order
  orders(after: String, first: Int, before: String, last: Int, orderIds: [ID!], restaurantId: ID!, dateRange: DateRange!, includeCancelledOrders: Boolean, tableId: ID, name: String, customerName: String, notes: String, sortOption: String): OrderTypeConnection
}

type Viewer implements Node {
  id: ID!
  language(languageId: ID!): Language
  languages(after: String, first: Int, before: String, last: Int, languageIds: [ID!], key: String, name: String, sortOption: String): LanguageTypeConnection
  tableState(tableStateId: ID!): TableState
  tableStates(after: String, first: Int, before: String, last: Int, tableStateIds: [ID!], key: String, name: String, sortOption: String): TableStateTypeConnection
}
