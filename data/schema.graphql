input AddChoiceItemInput {
  name: [LanguageStringTuple]!
  description: [LanguageStringTuple]
  choiceItemPageUrl: String
  imageUrl: String
  clientMutationId: String
}

type AddChoiceItemPayload {
  errorMessage: String
  choiceItem: ChoiceItemTypeEdge
  clientMutationId: String
}

input AddMenuItemInput {
  name: [LanguageStringTuple]!
  description: [LanguageStringTuple]
  menuItemPageUrl: String
  imageUrl: String
  clientMutationId: String
}

type AddMenuItemPayload {
  errorMessage: String
  menuItem: MenuItemTypeEdge
  clientMutationId: String
}

input AddRestaurantInput {
  name: [LanguageStringTuple]!
  websiteUrl: String
  imageUrl: String
  address: String
  googleMapUrl: String
  status: String
  inheritParentRestaurantMenus: Boolean
  pin: String
  clientMutationId: String
}

type AddRestaurantPayload {
  errorMessage: String
  restaurant: RestaurantTypeEdge
  clientMutationId: String
}

type ChoiceItem implements Node {
  id: ID!
  name: String
  description: String
  menuItemPageUrl: String
  imageUrl: String
}

# A connection to a list of items.
type ChoiceItemTypeConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [ChoiceItemTypeEdge]
}

# An edge in a connection.
type ChoiceItemTypeEdge {
  # The item at the end of the edge
  node: ChoiceItem

  # A cursor for use in pagination
  cursor: String!
}

type GeoLocation {
  latitude: Float
  longitude: Float
}

type Language implements Node {
  id: ID!
  key: String
  name: String
  imageUrl: String
}

input LanguageStringTuple {
  language: String!
  value: String!
}

# A connection to a list of items.
type LanguageTypeConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [LanguageTypeEdge]
}

# An edge in a connection.
type LanguageTypeEdge {
  # The item at the end of the edge
  node: Language

  # A cursor for use in pagination
  cursor: String!
}

type MenuItem implements Node {
  id: ID!
  name: String
  description: String
  menuItemPageUrl: String
  imageUrl: String
}

# A connection to a list of items.
type MenuItemTypeConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [MenuItemTypeEdge]
}

# An edge in a connection.
type MenuItemTypeEdge {
  # The item at the end of the edge
  node: MenuItem

  # A cursor for use in pagination
  cursor: String!
}

type Mutation {
  addChoiceItem(input: AddChoiceItemInput!): AddChoiceItemPayload
  addMenuItem(input: AddMenuItemInput!): AddMenuItemPayload
  addRestaurant(input: AddRestaurantInput!): AddRestaurantPayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type ParentRestaurant implements Node {
  id: ID!
  name: String
  websiteUrl: String
  imageUrl: String
  address: String
  geoLocation: GeoLocation
  phones: [Phone!]
  status: String
  googleMapUrl: String
  inheritParentRestaurantMenus: Boolean
  pin: String
  languages: [Language!]
  tables: [Table!]
}

type Phone {
  label: String
  number: String
}

type Query {
  user: User
  viewer: Viewer

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

type Restaurant implements Node {
  id: ID!
  name: String
  websiteUrl: String
  imageUrl: String
  address: String
  geoLocation: GeoLocation
  phones: [Phone!]
  status: String
  googleMapUrl: String
  inheritParentRestaurantMenus: Boolean
  pin: String
  parentRestaurant: ParentRestaurant
}

# A connection to a list of items.
type RestaurantTypeConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [RestaurantTypeEdge]
}

# An edge in a connection.
type RestaurantTypeEdge {
  # The item at the end of the edge
  node: Restaurant

  # A cursor for use in pagination
  cursor: String!
}

type Table implements Node {
  id: ID!
  name: String
  status: String
  tableState: TableState
}

type TableState implements Node {
  id: ID!
  key: String
  name: String
  imageUrl: String
}

# A connection to a list of items.
type TableStateTypeConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [TableStateTypeEdge]
}

# An edge in a connection.
type TableStateTypeEdge {
  # The item at the end of the edge
  node: TableState

  # A cursor for use in pagination
  cursor: String!
}

type User implements Node {
  id: ID!
  choiceItem(choiceItemId: ID!): ChoiceItem
  choiceItems(after: String, first: Int, before: String, last: Int, choiceItemIds: [ID!], name: String, description: String, sortOption: String): ChoiceItemTypeConnection
  menuItem(menuItemId: ID!): MenuItem
  menuItems(after: String, first: Int, before: String, last: Int, menuItemIds: [ID!], name: String, description: String, sortOption: String): MenuItemTypeConnection
  restaurant(restaurantId: ID!): Restaurant
  restaurants(after: String, first: Int, before: String, last: Int, restaurantIds: [ID!], name: String, status: Boolean, inheritParentRestaurantMenus: Boolean, sortOption: String): RestaurantTypeConnection
}

type Viewer implements Node {
  id: ID!
  language(languageId: ID!): Language
  languages(after: String, first: Int, before: String, last: Int, languageIds: [ID!], key: String, name: String, sortOption: String): LanguageTypeConnection
  tableState(tableStateId: ID!): TableState
  tableStates(after: String, first: Int, before: String, last: Int, tableStateIds: [ID!], key: String, name: String, sortOption: String): TableStateTypeConnection
}
